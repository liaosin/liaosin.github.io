[{"title":"Andrew Ng-机器学习笔记（03）-线性回归（2/2）","date":"2017-05-20T16:00:00.000Z","path":"2017/05/21/Andrew Ng-机器学习笔记（03）-线性回归（2:2）/","text":"符号定义$m$：训练集数量$n$：特征数量，上图中为4$X$：训练集特征矩阵，$m \\times (n+1)$$Y$：训练集输出向量，$m \\times 1$$X^{(i)}$：第$i^{th}$个输入变量（或特征向量）$X^{(i)}_j$：第$i^{th}$特征向量的第$j$个特征，如$X^{(2)}_3=2$上图的假设函数：$h_{\\theta}(X)=\\theta_0+\\theta_1 x_1+\\theta_2 x_2 + \\theta_3 x_3 + \\theta_4 x_4$定义（与Andrew Ng不同，本文定义更适合于编程）：$x_0=1$$X^{(i)}=\\begin{bmatrix} x_0&amp; x_1&amp; x_2&amp; …&amp; x_n \\end{bmatrix} \\in \\mathbf{R}^{1 \\times (n+1)}$$\\Theta=\\begin{bmatrix} \\theta_0\\ \\theta_1\\ \\theta_2\\ …\\ \\theta_n \\end{bmatrix} \\in \\mathbf{R}^{(n+1) \\times 1}$假设函数：$h_{\\theta}(x)_{m \\times 1}=X_{m \\times (n+1)} \\Theta_{(n+1) \\times 1}$ 问题描述及求解 假设函数：$h_{\\theta}(x)=X \\Theta$ 参数：$\\Theta$ 损失函数： $J(\\Theta)=\\frac{1}{2m} \\sum_{i=1}^m (h_{\\theta}(x^{(i)})-y^{(i)})^2$ =&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt; $J(\\Theta)=\\frac{1}{2m} (X \\Theta - Y)^T \\cdot (X \\Theta - Y)$ 梯度下降： $\\theta_j := \\theta_j-\\alpha \\frac{\\partial}{\\partial\\theta_j}J(\\boldsymbol{\\theta})$ =&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt;=&gt; $\\theta_j := \\theta_j- \\alpha \\frac{1}{2m} \\left\\{ X^T \\cdot (X \\Theta - Y) + (X \\Theta - Y)^T \\cdot X \\right\\}$ $\\theta_j := \\theta_j- \\alpha \\frac{1}{m} X^T \\cdot (X \\Theta - Y)$ ⚠️1：$\\frac{\\partial}{\\partial \\boldsymbol{\\Theta}}J(\\boldsymbol{\\Theta})=2 X^T \\cdot (X \\Theta - Y)$ ⚠️2：由$X^T X \\Theta-X^T Y=0$，且$(X^T X)$可逆，则可直接求解参数$\\Theta=(X^T X)^{-1} X^T Y$ 特征缩放不同特征之间量纲不同、数值范围不一致，相差悬殊时容易造成$\\theta_j$之间差异极大，因此必须进行“特征缩放”。 均值规范化：$x_i=\\frac{x_i-\\mu_i}{\\sigma_i}$上式中，$\\mu_i$为特征$x$的均值；$\\sigma_i$为特征$x$的标准差。 学习率$\\alpha$ 残差$J$必须逐步下降(不小于$10^{-3}$) 学习率$\\alpha$过大容易造成残差发散或振荡 学习率$\\alpha$过小容易造成残差收敛过慢，消耗内存过多 学习率$\\alpha$选择：0.001、0.003、0.01、0.03、0.1、0.3、1、……特征的构建在构建假设函数$h_{\\theta}(X)$时纯粹地选择一个个特征可能仍无法满足很好的效果，此时应观察自变量-应变量之间的关系，人为构建特征。如下图所示：$h_{\\theta}(X)=\\theta_0+\\theta_1 x$将导致较大误差，可采用下式进行构建：$h_{\\theta}(X)=\\theta_0+\\theta_1 x_1+\\theta_2 x_2+\\theta_3 x_3…$上式中，$x_1=x, x_2=x^2, x_3=x^3…$","comments":true,"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"Andrew Ng-机器学习笔记（02）-线性回归（1/2）","date":"2017-05-12T16:00:00.000Z","path":"2017/05/13/Andrew Ng-机器学习笔记（02）/","text":"机器学习模型的表达符号定义$m$：训练集数量$x$：输入变量/特征，每个训练实例有$n$个特征数量$y$：输出值/目标值$(x^{(i)},y^{(i)})$：第$i$个训练实例$h_{\\theta}(x)$：假设函数（对于一维数据而言，$h_{\\theta}(x)=\\theta_0+\\theta_1 x$）$\\theta_0,\\theta_1$：参数$J(\\theta_0,\\theta_1)$：损失函数，$J(\\theta_0,\\theta_1)=\\frac{1}{2m} \\sum_{i=1}^m (h_{\\theta}(x^{(i)})-y^{(i)})^2$$min_{\\theta_0,\\theta_1}J(\\theta_0,\\theta_1)$：目标函数，通过最优化方法求取$\\theta_0,\\theta_1$使得损失函数$J(\\theta_0,\\theta_1)$达到最小值 梯度下降法使用梯度下降法求取$\\theta_0,\\theta_1$，具体为： $\\theta_j := \\theta_j-\\alpha. \\frac{\\partial}{\\partial\\theta_j}J(\\theta_0,\\theta_1)$ (for j=0 and j=1)⚠️编程时，所有变量更新完后再进行赋值；否则会造成误更新上式中，$\\alpha$为学习率（为正数）。1）在此解释，为何$\\alpha$之前为负号。定义：$B=\\frac{\\partial}{\\partial\\theta_j}J(\\theta_0,\\theta_1)$ 若$B&gt;0,\\alpha.B&gt;0$时，$\\theta$则往小值方向更替，如左图；若$B&lt;0,\\alpha.B&lt;0$时，$\\theta$则往大值方向更替，如右图。2）关于学习率$\\alpha$的选取问题 若$\\alpha$过小，则寻优速度较慢，所需时间较长；若$\\alpha$过大，则可能导致跳跃过平衡点，逐步发散。3）关于寻优问题梯度下降法寻优，很有可能导致寻找至局部最优点。 （上图为全局最优点） （上图为局部最优点）","comments":true,"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"Andrew Ng-机器学习笔记（01）-综述","date":"2017-05-11T16:00:00.000Z","path":"2017/05/12/Andrew Ng-机器学习笔记（01）/","text":"机器学习借鉴已有经验和教训E，开展任务T，任务完成指标达到P。 这个解释方式比较深奥，以判断西瓜成熟程度为例，通俗地翻译”机器学习”的定义：前人积累了很多关于判断西瓜成熟的经验，如可以通过判读敲击回声、如可以通过看西瓜表面花纹等，这些经验均被记录下来了。机器通过学习这些经验，形成自己的评价体系，并利用该评价体系评估一个西瓜的成熟度，并取得一定效果，如70%的准确率。以上过程即为：机器学习！ 还可以有种解释：存在一个未知的函数f，构成了特征（X）至标签（Y）的向量，目前已有的一堆（x_i,y_i）的例子。机器学习就是需要从无穷个假设集（hypothesis set）中找个一个函数g，使得函数g与函数f尽量贴近。以后面对新的特征x_new，即可采用函数g进行预示其标签。 机器学习（Machine Learning）分类机器学习（Machine Learning）主要可划分为： 监督学习（Supervised Learning） 无监督学习（Unsupervised Learning） 强化学习（Reinforcement Learning） 推荐系统（Recommender systems） etc 监督学习（Supervised Learning）定义：每组数据均有对应的标签。 回归（Regression）。对连续值进行预示，如对房价进行预示，如下图所示。 分类（Classification）。对离散值进行分类，如依据部分特征判断患者是否患有疾病，如下图所示。 无监督学习（Unsupervised Learning）定义：每组数据均没有对应的标签，只能进行聚类分析。","comments":true,"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://yoursite.com/tags/机器学习/"}]},{"title":"Tensorflow在Mac上的配置","date":"2017-04-16T12:21:19.000Z","path":"2017/04/16/mac-tensorflow/","text":"之前立志学习人工智能（机器学习），买了一大堆书，准备深入理论，再进行实践，可惜发现纯玩理论，不知道什么时候才是底线，还是要有项目背景，攻关克难才能进步。个人喜欢玩编程，可惜玩的一直是matlab，没玩过python，刚上手觉得特受打击，就一个破开发环境的安装就十分的墨迹，差点放弃。寻寻觅觅，终于找到了anaconda，觉得基本顺手了（毕竟习惯了matlab的单步调试方式）。纯粹看机器学习的书让人特无聊，而且感觉难度超大，内容之间的数学公式跳跃超大，未能细想就奔出了一个新的，让人难以接受，或许这也是边工作边学习的难处吧。于是想换个思路进行学习，就是实践！ 对于实践又有自己的一些认识：熟悉了解了工作原理即可，无须深入进行细节编程，因此不推荐一板一眼按照《机器学习实践》进行学习。思考半天，准备从tensorflow入手，利用案例进行学习，遇到算法不甚了解时，则去看书，挖掘，心中窃喜改种学习方法应该会比较适应自己！ tensorflow安装在晚上有很多，对于我这种对python开发环境不太了解的，只能逐步试凑。 1）安装 Anaconda2）建立一个 conda 计算环境3）激活环境,使用 conda 安装 TensorFlow4）安装成功后,每次使用 TensorFlow 的时候需要激活 conda 环境太变态了！感觉软件安装太困难了！ 对于第一步而言，相对比较简单。因为mac的anaconda有专用网址，也有比较好的Gui安装界面，因此很好就安装好了（目前python2.7较为常用，因此自己选择了2.7）。site：Download Anaconda Now! 第二步：在anaconda的environments中新建一个environment，命名为tensorflow。而后选择’&gt;’，点选‘open terminal’ 第三步：在终端中，激活“$ source activate tensorflow”。执行以下语句进行tensorflow安装：pip install –ignore-installed –upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.8.0rc0-py2-none-any.whl 第四步：采用下式进行tensorflow安装正确性的校验！ import tensorflow as tf hello = tf.constant(‘Hello, TensorFlow!’) sess = tf.Session() print sess.run(hello) a = tf.constant(10) b = tf.constant(20) print sess.run(a+b) 代码执行输出30，即为安装成功！","comments":true,"tags":[{"name":"初级配置","slug":"初级配置","permalink":"http://yoursite.com/tags/初级配置/"}]},{"title":"基于hexo+github pages的个人博客开发笔记(1/2)","date":"2017-04-16T04:46:43.000Z","path":"2017/04/16/hexo-github1/","text":"概述一直想开通一个博客，have something to say。记录一些平时的琐事或者心得，为的是减少以后的重复劳动，节约时间。思前想后，一直在寻觅一个比较好的平台：知乎里面发现无法直接插入图片；微博里面发现无法编辑长微博以及对math equation 无法进行编辑；博客园不支持markdown……在痛苦和纠结中，深感笔记的重要性；在寻寻觅觅中发现了hexo如此的强大；发现了github的便携；这两者的结合不仅支持了本地笔记的梳理，还可以在网上共享，简直是绝配。在markdown方面也发现了typora的友善，但是也存在一定的问题，如不支持多几级结构的拓扑，无法形成笔记的体系性管理。 另，本文基本是自己的网上百度教程，实践后的总结梳理，仅供网友参考。 平台：Macbook Air 2016 Why Markdown？ MacBook Air 的pages与mathtype兼容存在一定问题（mac 在近期的更新中pages可以使用latex进行公式编辑了） word中，mathtype公式有时与同行的文字未能上下对称 word远没有pdf、文本可靠稳定 自己存在一定的强迫症，过于纠结于word的排版格式 markdown可以使用使用文本编辑，不存在跨平台编辑、兼容问题 markdown可以进行图片、流程、math、code的混编，并自动排版 Why Typora？尝试过千百个markdown App，权衡对比后，提出：Typora+Quiver。 Typora支持边写边看（偶尔存在一定的时延），完美支持各种图片、流程、math、code的混编。重点是支持math的在线预览，这个对长、复杂公式的编辑尤其重要！缺点：无法构建多级体系，Quiver可以完美互补。 Hexo 环境配置本节引用 小pxu的 如何使用hexo搭建个人博客。 node.js（在node.js官网中下载安装） git（OS系统中直接安装x-code就可以了） hexo 打开OS系统终端 输入安装hexo的代码(此处安装时有可能会提示输入系统管理员密码) $ sudo npm install -g hexo 在用户目录下新建blog文件夹 ：$ cd ~；$ mkdir blog 在终端进入该文件夹，初始化博客：$ cd ~/blog；$ hexo init 完成以上后，在～/blog目录（博客根目录）下即可生成下图文件 本次查看（ctrl+c退出本地服务器）：$ hexo s；使用safari进入 http://localhost:4000/即可查看效果 GitHub配置 注册github账号并登陆 获取本机的SSH口令 重启终端 输入：$ ssh-keygen 输入编译代码：$ vim ~/.ssh/id_rsa.pub 复制红色部分 进入到github页面设置SSH口令 点击用户下拉菜单中的settings（step1) 点击左侧的SHH and GPG keys（step2) 在Title中输入口令名称（随意）（step3) 在key中贴上SSH口令（step4) 创建新的仓库 点击用户左侧的+号菜单中的New repOSitory（step1) 在repOSitory name中输入二级域名，格式请严格遵照username.github.io（step2) ps：username填写github的登录用户名，否则上线的时候会报错 是否公开选项可以选取Public（step3) 勾选step4处，会自动生成一份可编辑的README.md文件（建议勾选）（step4) 点击create repOSitory生成仓库完毕（step5) 博客配置及发布 设置blog配置文件 打开blog文件夹下的_config.yml文件 找到最下方的type，输入git（注意冒号后面是带空格的） repo行可能没有，需要自己输入，后面跟上github上仓库中复制的http地址（注意此时1、2两处应该是一样的username），不然上传时会报错 在终端上传博客 安装插件：$ npm install hexo-deployer-git —save 获取代码级上传代码：$ hexo g -d 重新在github仓库查看上传文件，此时在step2中会有之前bolg中生成的文件 blog地址：https://username.github.io 新建及更新博客 新建：$ hexo new &quot;filename&quot; 此时在bolg/source/_posts/下面会看到新建的博客，文件：filename.md，用Typora打开编辑即可 更新：$ hexo g -d 删除博客：在bolg/source/_posts/中删除对应.md文件，$ hexo clean即可。 注意1：新建及更新博客时，必须将路径切换至blog中，即先执行：$ cd ~/blog； 注意2：新建博客时，使用的博客名称最好不要有中文，否则图片插入时，Typora不支持预览。","comments":true,"tags":[{"name":"初级配置","slug":"初级配置","permalink":"http://yoursite.com/tags/初级配置/"}]},{"title":"基于hexo+github pages的个人博客开发笔记(2/2)","date":"2017-04-16T04:43:54.000Z","path":"2017/04/16/hexo-github2/","text":"Hexo theme 更换（yilia） 打开终端，切换路径址至blog中； 安装主题：$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 在blog根目录下，打开_config.yml，更改主题：theme: yilia Hexo 数学公式渲染 安装MathJax 打开终端，切换路径至blog中； 执行以下代码： $ npm install hexo-math —save $ hexo math install 偶尔会出现渲染bug，进行以下更改： 打开marked.js（在./node_modules/marked/lib/中） 进行两个替换 escape: /^\\([\\`*{}[]()# +-.!_&gt;])/, escape: /^\\([`*[]()# +-.!_&gt;])/, em: /^\\b_((?:[^_]|__)+?)_\\b|^*((?:**|[\\s\\S])+?)*(?!*)/,em:/^*((?:**|[\\s\\S])+?)*(?!*)/, Hexo 图片存储 确认 _config.yml 中有 post_asset_folder:true ； 打开终端，切换路径至blog中； 执行：npm install https://github.com/CodeFalling/hexo-asset-image —save 这样一来，新建一个博客时，hexo将自动新建一个与之同名的文件夹，在图片插入时直接使用![filename](floder/pic.jpg)即可。","comments":true,"tags":[{"name":"初级配置","slug":"初级配置","permalink":"http://yoursite.com/tags/初级配置/"}]}]